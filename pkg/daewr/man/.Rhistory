}
}
if(nm1==FALSE)
{
any.col <- colnames(x)
letter.col <- LETTERS[1:ncol(x)]
colnames(x) <- letter.col
xx <- x
xx$y <- y
suppressWarnings(invisible(capture.output(res<- ihstep(y,x,m,c,nm1))) )
f <- paste("y~", paste(res,collapse="+"),sep="")
f2 <- paste("y ~",paste(stringi::stri_replace_all_fixed(res,letter.col ,
any.col, vectorize_all = FALSE),collapse="+"))
collect <- data.frame(formula=f2, R2= round(summary(lm(formula(f),data=xx) )$r.square,3) )
for (i in (2:step)) {
suppressWarnings( invisible(capture.output(res <- fhstep(y,x,m,c,res,nm1))) )
f <- paste("y~", paste(res,collapse="+"),sep="")
f2 <- paste("y ~",paste(stringi::stri_replace_all_fixed(res,letter.col ,
any.col, vectorize_all = FALSE),collapse="+"))
collect <- rbind(collect,data.frame(formula=f2, R2= round(summary(lm(formula(f),data=xx) )$r.square,3)))
}
}
return(collect)
}
#Definitive Screening Design
library(daewr)
set.seed(1234)
x <- DefScreen(m=5,c=0)
colnames(x) <- paste("x",1:5,sep="")
x$y <- 3*x$x1 + 2*x$x2 + 2*x$x4*x$x5 + x$x3^2 + 2*x$x1^2 + rnorm(nrow(x),0,1)
HierAFS(x$y,x[,-6],m=5,c=0,step=4,nm1=FALSE )
fhstep <- function(y,des,m, c,prvm,nm1) {
#get names of linear terms
lin<-colnames(des)
#make replacement table for use in getting quadratic names
values<-c("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z")
repl<-c("I(A^2)","I(B^2)","I(C^2)","I(D^2)","I(E^2)","I(F^2)","I(G^2)","I(H^2)","I(I^2)","I(J^2)","I(K^2)","I(L^2)","I(M^2)","I(N^2)","I(O^2)","I(P^2)","I(Q^2)","I(R^2)","I(S^2)","I(T^2)","I(U^2)","I(V^2)","I(W^2)","I(X^2)","I(Y^2)","I(Z^2)")
repl.tab <- cbind(values, repl)
#get quadratic variable names
if(m==0) {
quad<-character()
} else {
indx<-rep(0,m)
for (i in 1:m) {
indx[i]<-match(lin[i],repl.tab[, 1], nomatch=0)
}
quad<-rep('A',m)
for (i in 1:m) {
quad[i]<-lin[i]
}
quad[indx != 0] <- repl.tab[indx, 2]
quad<-paste(quad,collapse='+')
}
# create the data frame for analysis
dat<-data.frame(y=y,des)
#gets the model matrix of the full model
#gets the model matrix
lm1<-lm(y~(.)^2,data=dat)
mm<-model.matrix(lm1)
fact<-colnames(mm)
fact<-fact[-1]
fact<-paste(fact,collapse='+')
mod<-paste(c(fact,quad),collapse='+')
lm2<-lm(reformulate(termlabels=mod, response='y'),data=dat) # This works
mm<-model.matrix(lm2)
#deletes the constant column from the model matrix
mm<-mm[,2:ncol(mm)]
#creates data frame with terms from previous model
d1<-data.frame(y=y,mm[,prvm])
#fits the previous model
m1<-lm(y~(.),data=d1)
#finds the term whose hierarchical model added to the previous model
# has the minimum pvalue
term<-fnextrm(y,mm,prvm)
# fits model model in factors with maximum correlation
d2<-data.frame(y=y,mm[,term])
m2<-lm(y~(.),data=d2)
result<-summary(m2)
print(result)
return(term)
}
#Definitive Screening Design
library(daewr)
set.seed(1234)
x <- DefScreen(m=5,c=0)
colnames(x) <- paste("x",1:5,sep="")
x$y <- 3*x$x1 + 2*x$x2 + 2*x$x4*x$x5 + x$x3^2 + 2*x$x1^2 + rnorm(nrow(x),0,1)
HierAFS(x$y,x[,-6],m=5,c=0,step=4,nm1=FALSE )
trm<-ihstep(x$y,x[ ,-6],m=5,c=0,nm1=FALSE)
firstm<-function(y,des,nm1) {
nmsm<-colnames(des)
nmt<-length(nmsm)
pval<-rep(0,nmt)
# get the pvalue for the hierarchical model associated with each term in mmsm
for (i in 1:nmt) {
term<-nmsm[i]
#checks to see if term is an interaction or quadratic term
#gets first letter in term
t1<-substr(term,1,1)
t2<-substr(term,2,2)
t3<-substr(term,3,3)
iquad=FALSE
#########################################################
if(nm1==TRUE){
if(t2=="(") {iquad=TRUE}
############# remove
cat("t2=",t2,"iquad=",iquad)
}
if(nm1==FALSE){
if(t1=="I") {iquad=TRUE}
############# remove
cat("t1=",t1,"iquad=",iquad)
}
hmt<-term
if(iquad){hmt<-c(term,t3)}
cmp<-FALSE
if(t2!= ""&&iquad!=TRUE){cmp=TRUE}
if(cmp){hmt<-c(t1,t3,term)}
###############################################
cat("i=",i)
cat("hmt=",hmt)
##########################################
d2<-data.frame(y=y,des[,hmt])
m2<-lm(y~(.),data=d2)
sm2<-summary(m2)
sm2f<-sm2$fstatistic
pval[i]<-1-pf(sm2f[1],sm2f[2],sm2f[3])
#  print(pval[i])
}
# gets hierarchical model for term whose hierarchical model has the smallest pvalue
idx<-which.min(pval)
term<-nmsm[idx]
#checks to see if term is an interaction or quadratic term
#gets first letter in term
t1<-substr(term,1,1)
t2<-substr(term,2,2)
t3<-substr(term,3,3)
iquad=FALSE
#########################################################
if(nm1==TRUE){
if(t2=="(") {iquad=TRUE}
############# remove
cat("t2=",t2,"iquad=",iquad)
}
if(nm1==FALSE){
if(t1=="I") {iquad=TRUE}
############# remove
cat("t1=",t1,"iquad=",iquad)
}
##########################################################
#if(t2=="(") {iquad=TRUE}
############# remove
cat("t2=",t2,"iquad=",iquad)
mt<-term
if(iquad){mt<-c(term,t3)}
cmp<-FALSE
if(t2!= ""&&iquad!=TRUE){cmp=TRUE}
if(cmp){mt<-c(t1,t3,term)}
return(mt)
}
library(daewr)
set.seed(1234)
x <- DefScreen(m=5,c=0)
colnames(x) <- paste("x",1:5,sep="")
x$y <- 3*x$x1 + 2*x$x2 + 2*x$x4*x$x5 + x$x3^2 + 2*x$x1^2 + rnorm(nrow(x),0,1)
HierAFS(x$y,x[,-6],m=5,c=0,step=4,nm1=FALSE )
HierAFS(x$y,x[,-6],m=5,c=0,step=4,nm1=FALSE )
trm<-ihstep(x$y,x[ ,-6],m=5,c=0,nm1=FALSE)
install.packages("C:/My_R_Projects/pkg/daewr_1.2-0.zip", repos = NULL, type = "win.binary")
detach("package:daewr", unload = TRUE)
install.packages("C:/My_R_Projects/pkg/daewr_1.2-0.zip", repos = NULL, type = "win.binary")
install.packages("C:/My_R_Projects/pkg/daewr_1.2-0.zip", repos = NULL, type = "win.binary")
library(daewr)
set.seed(1234)
x <- DefScreen(m=5,c=0)
colnames(x) <-c("A","B","C","D","E")
HierAFS(x$y,x[,-6],m=5,c=0,step=4)
x$y <- 3*x$A + 2*x$B + 2*x$D*x$E + x$C^2 + 2*x$A^2 + rnorm(nrow(x),0,1)
HierAFS(x$y,x[,-6],m=5,c=0,step=4)
ihstep(x$y,x[,-6],m=5,c=0)
x$y
y<-x$y
des<x[,-6]
des<-x[,-6]
m=5
c=0
#get names of linear terms
lin<-colnames(des)
#make replacement table for use in getting quadratic names
values<-c("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z")
repl<-c("I(A^2)","I(B^2)","I(C^2)","I(D^2)","I(E^2)","I(F^2)","I(G^2)","I(H^2)","I(I^2)","I(J^2)","I(K^2)","I(L^2)","I(M^2)","I(N^2)","I(O^2)","I(P^2)","I(Q^2)","I(R^2)","I(S^2)","I(T^2)","I(U^2)","I(V^2)","I(W^2)","I(X^2)","I(Y^2)","I(Z^2)")
repl.tab <- cbind(values, repl)
#get quadratic variable names
if(m==0) {
quad<-character()
} else {
indx<-rep(0,m)
for (i in 1:m) {
indx[i]<-match(lin[i],repl.tab[, 1], nomatch=0)
}
quad<-rep('A',m)
for (i in 1:m) {
quad[i]<-lin[i]
}
quad[indx != 0] <- repl.tab[indx, 2]
quad<-paste(quad,collapse='+')
}
# create the data frame for analysis
dat<-data.frame(y=y,des)
#gets the model matrix
lm1<-lm(y~(.)^2,data=dat)
mm<-model.matrix(lm1)
fact<-colnames(mm)
fact<-fact[-1]
fact<-paste(fact,collapse='+')
mod<-paste(c(fact,quad),collapse='+')
lm2<-lm(reformulate(termlabels=mod, response='y'),data=dat) # This works
mm<-model.matrix(lm2)
mm<
mm
#deletes the constant column from the model matrix
mm<-mm[,2:ncol(mm)]
firstm<-function(y,des) {
nmsm<-colnames(des)
nmt<-length(nmsm)
pval<-rep(0,nmt)
# get the pvalue for the hierarchical model associated with each term in mmsm
for (i in 1:nmt) {
term<-nmsm[i]
#checks to see if term is an interaction or quadratic term
#gets first letter in term
t1<-substr(term,1,1)
t2<-substr(term,2,2)
t3<-substr(term,3,3)
iquad=FALSE
if(t2=="(") {iquad=TRUE}
hmt<-term
if(iquad){hmt<-c(term,t3)}
cmp<-FALSE
if(t2!= ""&&iquad!=TRUE){cmp=TRUE}
if(cmp){hmt<-c(t1,t3,term)}
d2<-data.frame(y=y,des[,hmt])
m2<-lm(y~(.),data=d2)
sm2<-summary(m2)
sm2f<-sm2$fstatistic
pval[i]<-1-pf(sm2f[1],sm2f[2],sm2f[3])
}
# gets hierarchical model for term whose hierarchical model has the smallest pvalue
idx<-which.min(pval)
term<-nmsm[idx]
#checks to see if term is an interaction or quadratic term
#gets first letter in term
t1<-substr(term,1,1)
t2<-substr(term,2,2)
t3<-substr(term,3,3)
iquad=FALSE
if(t2=="(") {iquad=TRUE}
mt<-term
if(iquad){mt<-c(term,t3)}
cmp<-FALSE
if(t2!= ""&&iquad!=TRUE){cmp=TRUE}
if(cmp){mt<-c(t1,t3,term)}
return(mt)
}
trm<-firstm(y,mm)
trm
d1<-data.frame(y=y,mm[,trm])
d1
t1<-substr(trm,1,1)
t2<-substr(trm,2,2)
t3<-substr(trm,3,3)
t1
t2
t3
trm
length(trm)
ihstep <- function(y,des,m,c) {
#get names of linear terms
lin<-colnames(des)
#make replacement table for use in getting quadratic names
values<-c("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z")
repl<-c("I(A^2)","I(B^2)","I(C^2)","I(D^2)","I(E^2)","I(F^2)","I(G^2)","I(H^2)","I(I^2)","I(J^2)","I(K^2)","I(L^2)","I(M^2)","I(N^2)","I(O^2)","I(P^2)","I(Q^2)","I(R^2)","I(S^2)","I(T^2)","I(U^2)","I(V^2)","I(W^2)","I(X^2)","I(Y^2)","I(Z^2)")
repl.tab <- cbind(values, repl)
#get quadratic variable names
if(m==0) {
quad<-character()
} else {
indx<-rep(0,m)
for (i in 1:m) {
indx[i]<-match(lin[i],repl.tab[, 1], nomatch=0)
}
quad<-rep('A',m)
for (i in 1:m) {
quad[i]<-lin[i]
}
quad[indx != 0] <- repl.tab[indx, 2]
quad<-paste(quad,collapse='+')
}
# create the data frame for analysis
dat<-data.frame(y=y,des)
#gets the model matrix
lm1<-lm(y~(.)^2,data=dat)
mm<-model.matrix(lm1)
fact<-colnames(mm)
fact<-fact[-1]
fact<-paste(fact,collapse='+')
mod<-paste(c(fact,quad),collapse='+')
#  lmtest<-lm(y~A+B+A:B+I(A^2)+I(B^2),data=dat)
lm2<-lm(reformulate(termlabels=mod, response='y'),data=dat) # This works
mm<-model.matrix(lm2)
#deletes the constant column from the model matrix
mm<-mm[,2:ncol(mm)]
# finds the initial hierarchical model with the lowest regression p-value
trm<-firstm(y,mm)
d1<-data.frame(y=y,mm[,trm])
# if only one term in the model get the correct name
# t1<-substr(trm,1,1)
# t2<-substr(trm,2,2)
# t3<-substr(trm,3,3)
# iquad=FALSE
#   if(t2=="(") {iquad=TRUE}
hmt<-trm
if(t2=="") {
nms<-names(d1)
nms[2]<-hmt
names(d1)<-nms
}
m1<-lm(y~(.),data=d1)
result<-summary(m1)
print(result)
return(trm)
}
set.seed(1234)
x <- DefScreen(m=5,c=0)
colnames(x) <-c("A","B","C","D","E")
#colnames(x) <- paste("x",1:5,sep="")
#x$y <- 3*x$x1 + 2*x$x2 + 2*x$x4*x$x5 + x$x3^2 + 2*x$x1^2 + rnorm(nrow(x),0,1)
x$y <- 3*x$A + 2*x$B + 2*x$D*x$E + x$C^2 + 2*x$A^2 + rnorm(nrow(x),0,1)
HierAFS(x$y,x[,-6],m=5,c=0,step=4)
ihstep(x$y,x[,-6],m=5,c=0)
d1
hmt<-trm
m1<-lm(y~(.),data=d1)
result<-summary(m1)
print(result)
ihstep <- function(y,des,m,c) {
#get names of linear terms
lin<-colnames(des)
#make replacement table for use in getting quadratic names
values<-c("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z")
repl<-c("I(A^2)","I(B^2)","I(C^2)","I(D^2)","I(E^2)","I(F^2)","I(G^2)","I(H^2)","I(I^2)","I(J^2)","I(K^2)","I(L^2)","I(M^2)","I(N^2)","I(O^2)","I(P^2)","I(Q^2)","I(R^2)","I(S^2)","I(T^2)","I(U^2)","I(V^2)","I(W^2)","I(X^2)","I(Y^2)","I(Z^2)")
repl.tab <- cbind(values, repl)
#get quadratic variable names
if(m==0) {
quad<-character()
} else {
indx<-rep(0,m)
for (i in 1:m) {
indx[i]<-match(lin[i],repl.tab[, 1], nomatch=0)
}
quad<-rep('A',m)
for (i in 1:m) {
quad[i]<-lin[i]
}
quad[indx != 0] <- repl.tab[indx, 2]
quad<-paste(quad,collapse='+')
}
# create the data frame for analysis
dat<-data.frame(y=y,des)
#gets the model matrix
lm1<-lm(y~(.)^2,data=dat)
mm<-model.matrix(lm1)
fact<-colnames(mm)
fact<-fact[-1]
fact<-paste(fact,collapse='+')
mod<-paste(c(fact,quad),collapse='+')
#  lmtest<-lm(y~A+B+A:B+I(A^2)+I(B^2),data=dat)
lm2<-lm(reformulate(termlabels=mod, response='y'),data=dat) # This works
mm<-model.matrix(lm2)
#deletes the constant column from the model matrix
mm<-mm[,2:ncol(mm)]
# finds the initial hierarchical model with the lowest regression p-value
trm<-firstm(y,mm)
d1<-data.frame(y=y,mm[,trm])
# if only one term in the model get the correct name
# t1<-substr(trm,1,1)
# t2<-substr(trm,2,2)
# t3<-substr(trm,3,3)
# iquad=FALSE
#   if(t2=="(") {iquad=TRUE}
# hmt<-trm
# if(t2=="") {
#   nms<-names(d1)
#   nms[2]<-hmt
#   names(d1)<-nms
# }
m1<-lm(y~(.),data=d1)
result<-summary(m1)
print(result)
return(trm)
}
HierAFS(x$y,x[,-6],m=5,c=0,step=4)
ihstep(x$y,x[,-6],m=5,c=0)
set.seed(1234)
x <- DefScreen(m=5,c=0)
colnames(x) <-c("A","B","C","D","E")
#colnames(x) <- paste("x",1:5,sep="")
#x$y <- 3*x$x1 + 2*x$x2 + 2*x$x4*x$x5 + x$x3^2 + 2*x$x1^2 + rnorm(nrow(x),0,1)
x$y <- 3*x$A + 2*x$B + 2*x$D*x$E + x$C^2 + 2*x$A^2 + rnorm(nrow(x),0,1)
HierAFS(x$y,x[,-6],m=5,c=0,step=4)
trm<-ihstep(x$y,x[,-6],m=5,c=0)
trm
trm<-fhstep(x$y,x[,-6],m-5,c=0,trm)
trm<-fhstep(x$y,x[,-6],m-5,c=0,trm)
trm<-fhstep(x$y,x[,-6],m-5,c=0,trm)
set.seed(1234)
x <- DefScreen(m=5,c=0)
colnames(x) <-c("A","B","C","D","E")
#colnames(x) <- paste("x",1:5,sep="")
x$y<-4*x$A^2+2*x$A*x$B+rnorm(nrow(x),0,1)
x$y<-4*x$A^2+2*x$A*x$B+rnorm(nrow(x),0,1)
HierAFS(x$y,x[,-6],m=5,c=0,step=2)
detach("package:daewr", unload = TRUE)
install.packages("daewr", repos="http://R-Forge.R-project.org")
set.seed(1234)
x <- DefScreen(m=5,c=0)
colnames(x) <-c("A","B","C","D","E")
x$y <- 3*x$A + 2*x$B + 2*x$D*x$E + x$C^2 + 2*x$A^2 + rnorm(nrow(x),0,1)
HierAFS(x$y,x[,-6],m=5,c=0,step=4)
################################################################
################################################################
## HierAFS
## RSM forward regression keeping model hierarchy
## y: Response vector
## x: Data frame of x-variables
## step: Number of forward steps requested
## require(daewr)
## if the data frame of x variables has column names of length 1 nm1 should be TRUE
## if the column namees of x are more than length 1 nm1 should be FALSE
HierAFS <- function(y,x,m,c,step)
{
#  require(daewr)
nm1=TRUE
colx<-ncol(x)
try(if(m+c!=colx) stop("m+c must equal the number of columns of x"))
if(nm1==TRUE)
{
any.col <- colnames(x)
xx <- x
xx$y <- y
suppressWarnings(invisible(capture.output(res<- ihstep(y,x,m,c))) )
f <- paste("y~", paste(res,collapse="+"),sep="")
collect <- data.frame(formula=f, R2= round(summary(lm(formula(f),data=xx) )$r.square,3) )
for (i in (2:step)) {
suppressWarnings( invisible(capture.output(res <- fhstep(y,x,m,c,res))) )
f <- paste("y~", paste(res,collapse="+"),sep="")
#f2 <- paste("y ~",paste(stringi::stri_replace_all_fixed(res,letter.col ,
#                                                        any.col, vectorize_all = FALSE),collapse="+"))
collect <- rbind(collect,data.frame(formula=f, R2= round(summary(lm(formula(f),data=xx) )$r.square,3)))
}
}
if(nm1==FALSE)
{
any.col <- colnames(x)
letter.col <- LETTERS[1:ncol(x)]
colnames(x) <- letter.col
xx <- x
xx$y <- y
suppressWarnings(invisible(capture.output(res<- ihstep(y,x,m,c))) )
f <- paste("y~", paste(res,collapse="+"),sep="")
f2 <- paste("y ~",paste(stringi::stri_replace_all_fixed(res,letter.col ,
any.col, vectorize_all = FALSE),collapse="+"))
collect <- data.frame(formula=f2, R2= round(summary(lm(formula(f),data=xx) )$r.square,3) )
for (i in (2:step)) {
suppressWarnings( invisible(capture.output(res <- fhstep(y,x,m,c,res))) )
f <- paste("y~", paste(res,collapse="+"),sep="")
f2 <- paste("y ~",paste(stringi::stri_replace_all_fixed(res,letter.col ,
any.col, vectorize_all = FALSE),collapse="+"))
collect <- rbind(collect,data.frame(formula=f2, R2= round(summary(lm(formula(f),data=xx) )$r.square,3)))
}
}
return(collect)
}
set.seed(1234)
x <- DefScreen(m=5,c=0)
colnames(x) <-c("A","B","C","D","E")
x$y <- 3*x$A + 2*x$B + 2*x$D*x$E + x$C^2 + 2*x$A^2 + rnorm(nrow(x),0,1)
library(daewr)
set.seed(1234)
x <- DefScreen(m=5,c=0)
colnames(x) <-c("A","B","C","D","E")
#colnames(x) <- paste("x",1:5,sep="")
x$y <- 3*x$A + 2*x$B + 2*x$D*x$E + x$C^2 + 2*x$A^2 + rnorm(nrow(x),0,1)
HierAFS(x$y,x[,-6],m=5,c=0,step=4)
trm<-ihstep(x$y,x[,-6],m=5,c=0)
trm<-fhstep(x$y,x[,-6],m-5,c=0,trm)
trm<-fhstep(x$y,x[,-6],m-5,c=0,trm)
trm<-fhstep(x$y,x[,-6],m-5,c=0,trm)
# Example p. 240 Design and Analysis of Experiments with R PB Design
library(BsMD)
data(PB12Des,package="BsMD")
colnames(PB12Des)<-c("c11","c10","c9","c8","G","F","E","D","C","B","A")
#Reorder the columns to match Table 6.11
castf<-PB12Des[c(11,10,9,8,7,6,5,4,3,2,1)]
y<-c(4.733,4.625,5.899,7.0,5.752,5.682,6.607,5.818,5.917,5.863,6.058,4.809)
castf<-cbind(castf,y)
castfr <- castf[ , c(1:7, 12)]
library(daewr)
des<-castfr[ ,c(1:7)]
y<-castfr[ , 8]
HierAFS(y,des,m=0,c=7,step=4)
install.packages("daewr")
