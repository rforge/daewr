A<-c(-1,1,1,1,-1,1,-1,-1,1,1,-1,1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,1,1,1,1,-1,-1,1)
B<-c(1,1,1,1,-1,1,1,-1,-1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,1,1,1)
C<-c(1,1,1,-1,-1,1,1,-1,1,1,1,-1,1,-1,1,-1,1,-1,1,-1,-1,1,1,-1,-1,-1,-1,-1,1,-1,1,-1)
D<-c(-1,1,-1,1,1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,1,1,1,-1,-1,1,1,-1)
E<-c(1,1,1,1,1,-1,-1,1,-1,1,1,-1,-1,-1,-1,1,1,-1,-1,-1,1,-1,1,-1,-1,1,-1,1,-1,1,1,-1)
F<-c(1,1,-1,-1,-1,1,-1,1,-1,-1,1,-1,1,1,-1,-1,1,1,1,-1,-1,1,-1,-1,1,1,-1,1,-1,1,-1,1)
G<-c(1,1,-1,1,1,-1,1,-1,1,-1,1,-1,-1,1,1,1,1,1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,1)
y<-c(22,27.6,22.1,20.2,18.9,13.8,15.2,23.1,16.1,20.1,21.9,17.1,18.1,9.6,18.3,19.1,27,
17.3,17.7,14.7,22.2,21.1,24.3,13.9,19.4,22.7,14.6,23.3,20.4,22.6,21,17.5)
connector<-data.frame(A,B,C,D,E,F,G,y)
library(FrF2)
bdes<-FrF2(16,4)
fdes<-data.frame(D=(as.numeric(bdes$A)-1.5)/.5,H=(as.numeric(bdes$B)-1.5)/.5,G=(as.numeric(bdes$C)-1.5)/.5,
A=(as.numeric(bdes$D)-1.5)/.5)
fdes<-fdes[order(fdes[,4],fdes[,3],fdes[,2],fdes[,1]),]
fdes$F<- -fdes$D*fdes$G
fdes$GH<-fdes$G*fdes$H
fdes$C<- fdes$D*fdes$H*fdes$G*fdes$A
fdes$B<-fdes$H*fdes$G*fdes$A
fdes$J<- fdes$D*fdes$G*fdes$A
fdes$E<- -fdes$D*fdes$A
fdes$AC<- -fdes$D*fdes$H*fdes$G
fdes$AH<- fdes$H*fdes$A
fdes$AG<- fdes$A*fdes$G
fdes$e1<-fdes$D*fdes$H
fdes$e2<-fdes$D*fdes$H*fdes$A
fdes$y<-c(43.7,40.2,42.4,44.7,42.4,45.9,42.2,40.6,42.4,45.5,43.6,40.6,44.0,40.2,42.5,49.5)
fdes
mean(fdes$y)
sum(fdes$D*fdes$y)/16
modw<-lm(y~D+H+G+A+F+GH+C+B+J+E+AC+AH+AG+e1+e2,data=fdes)
summary(modw)
library(daewr)
fullnormal(modw$coefficients[2:16],names(modw$coefficients[2:16]),alpha=.08,refline=FALSE)
modwr<-lm(y~B+C,data=fdes)
summary(modwr)
plot(fdes$C,fdes$y)
modwr<-lm(y~B+C,data=fdes)
summary(modwr)
plot(fdes$B,fdes$y)
fdes$res<-modwr$residuals
dispD<-tapply(fdes$res,fdes$D,var)
disp[1]<-log(dispD[2]/dispD[1])
dispH<-tapply(fdes$res,fdes$H,var)
disp[2]<-log(dispH[2]/dispD[1])
dispG<-tapply(fdes$res,fdes$G,var)
disp[3]<-log(dispG[2]/dispG[1])
dispA<-tapply(fdes$res,fdes$A,var)
disp[4]<-log(dispA[2]/dispA[1])
dispF<-tapply(fdes$res,fdes$F,var)
disp[5]<-log(dispF[2]/dispF[1])
dispC<-tapply(fdes$res,fdes$C,var)
disp[6]<-log(dispC[2]/dispC[1])
dispB<-tapply(fdes$res,fdes$B,var)
disp[7]<-log(dispB[2]/dispB[1])
dispJ<-tapply(fdes$res,fdes$J,var)
disp[8]<-log(dispJ[2]/dispJ[1])
dispE<-tapply(fdes$res,fdes$E,var)
disp[9]<-log(dispE[2]/dispE[1])
dispGH<-tapply(fdes$res,fdes$GH,var)
disp[10]<-log(dispGH[2]/dispGH[1])
dispAC<-tapply(fdes$res,fdes$AC,var)
disp[11]<-log(dispAC[2]/dispAC[1])
dispAH<-tapply(fdes$res,fdes$AH,var)
disp[12]<-log(dispAH[2]/dispAH[1])
dispAG<-tapply(fdes$res,fdes$AG,var)
disp[13]<-log(dispAG[2]/dispAG[1])
dispe1<-tapply(fdes$res,fdes$e1,var)
disp[14]<-log(dispe1[2]/dispe1[1])
dispe2<-tapply(fdes$res,fdes$e2,var)
disp[15]<-log(dispe2[2]/dispe2[1])
disp<-rep(0,15)
# calculate dispersion effects from residuals from model modwr
fdes$res<-modwr$residuals
dispD<-tapply(fdes$res,fdes$D,var)
disp[1]<-log(dispD[2]/dispD[1])
dispH<-tapply(fdes$res,fdes$H,var)
disp[2]<-log(dispH[2]/dispD[1])
dispG<-tapply(fdes$res,fdes$G,var)
disp[3]<-log(dispG[2]/dispG[1])
dispA<-tapply(fdes$res,fdes$A,var)
disp[4]<-log(dispA[2]/dispA[1])
dispF<-tapply(fdes$res,fdes$F,var)
disp[5]<-log(dispF[2]/dispF[1])
dispC<-tapply(fdes$res,fdes$C,var)
disp[6]<-log(dispC[2]/dispC[1])
dispB<-tapply(fdes$res,fdes$B,var)
disp[7]<-log(dispB[2]/dispB[1])
dispJ<-tapply(fdes$res,fdes$J,var)
disp[8]<-log(dispJ[2]/dispJ[1])
dispE<-tapply(fdes$res,fdes$E,var)
disp[9]<-log(dispE[2]/dispE[1])
dispGH<-tapply(fdes$res,fdes$GH,var)
disp[10]<-log(dispGH[2]/dispGH[1])
dispAC<-tapply(fdes$res,fdes$AC,var)
disp[11]<-log(dispAC[2]/dispAC[1])
dispAH<-tapply(fdes$res,fdes$AH,var)
disp[12]<-log(dispAH[2]/dispAH[1])
dispAG<-tapply(fdes$res,fdes$AG,var)
disp[13]<-log(dispAG[2]/dispAG[1])
dispe1<-tapply(fdes$res,fdes$e1,var)
disp[14]<-log(dispe1[2]/dispe1[1])
dispe2<-tapply(fdes$res,fdes$e2,var)
disp[15]<-log(dispe2[2]/dispe2[1])
names(disp)<-c("D","H","G","A","F","C","B","J","E","GH","AC","AH","AG","e1","e2")
fullnormal(disp,names(disp),alpha=.35,refline=FALSE)
halfnormal(disp,names(disp),alpha=.35,refline=FALSE)
cnt<-lmeControl(opt="optim")
WeldSg<-groupedData(y~1|C,data=fdes)
modwi<-lme(y~B+C,data=WeldSg,weights=varIdent(form = ~ 1|C),control=cnt)
summary(modwi)
library(nlme)
cnt<-lmeControl(opt="optim")
WeldSg<-groupedData(y~1|C,data=fdes)
modwi<-lme(y~B+C,data=WeldSg,weights=varIdent(form = ~ 1|C),control=cnt)
summary(modwi)
library(FrF2)
bdes<-FrF2(16,4)
fdes<-data.frame(D=(as.numeric(bdes$A)-1.5)/.5,H=(as.numeric(bdes$B)-1.5)/.5,G=(as.numeric(bdes$C)-1.5)/.5,
A=(as.numeric(bdes$D)-1.5)/.5)
fdes<-fdes[order(fdes[,4],fdes[,3],fdes[,2],fdes[,1]),]
fdes$F<- -fdes$D*fdes$G
fdes$GH<-fdes$G*fdes$H
fdes$C<- fdes$D*fdes$H*fdes$G*fdes$A
fdes$B<-fdes$H*fdes$G*fdes$A
fdes$J<- fdes$D*fdes$G*fdes$A
fdes$E<- -fdes$D*fdes$A
fdes$AC<- -fdes$D*fdes$H*fdes$G
fdes$AH<- fdes$H*fdes$A
fdes$AG<- fdes$A*fdes$G
fdes$e1<-fdes$D*fdes$H
fdes$e2<-fdes$D*fdes$H*fdes$A
fdes$y<-c(43.7,40.2,42.4,44.7,42.4,45.9,42.2,40.6,42.4,45.5,43.6,40.6,44.0,40.2,42.5,49.5)
fdes
plot(fdes$C,fdes$y)
plot(fdes$C,fdes$y)
fdes1<-subset(fdes,fdes$C=-1)
fdes1<-subset(fdes,fdes$C==-1)
fdes1
fdes1<-subset(fdes,fdes$C==-1)
fdes2<-subset(fdes,fdes$C==1)
par(mfrow=c(1,2))
plot(fdes1$B,fdes1$y)
plot(fdes2$B.fdes2$y)
par(mfrow=c(1,2))
fdes1<-subset(fdes,fdes$C==-1)
fdes2<-subset(fdes,fdes$C==1)
par(mfrow=c(1,2))
plot(fdes1$B,fdes1$y)
plot(fdes2$B,fdes2$y)
par(mfrow=c(1,2))
library(pracma)
knitr::opts_chunk$set(fig.width=6, fig.height=8)
myPath <- "C:/Users/lawso/Box/coronavirus"
myFile <- "CsTestData (1).csv"
myData <- read.csv(paste(myPath, myFile, sep="/"))
myData
rows<-c(68:414)
subdata1<-myData[rows, c(1:26)]
dim(myData)
library(pracma)
knitr::opts_chunk$set(fig.width=6, fig.height=8)
myPath <- "C:/Users/lawso/Box/coronavirus"
myFile <- "CsTestData (1).csv"
myData <- read.csv(paste(myPath, myFile, sep="/"))
rows<-c(68:414)
subdata1<-myData[rows, c(1:26)]
ncasesl<-subdata1[,5]
ncasesl
nA<-c(.125,.375,.625,.875)
nA<-2*((nA-.5)/.5)
nA
nA<-c(.125,.375,.625,.875)
nA<-((nA-.5)/.5)
nA
nB<-c(.125,.375,.625,.875)
nB<-.667*((nB-.5)/.5)
nB
nA
library(AlgDesign)
gen.factorial(levels-c(20,30,12.5,17.5,4,6))
gen.factorial(levels=c(20,30,12.5,17.5,4,6))
A<-c(20,30)
B<-c(12.5,17.5)
C<-c(4,6)
cont<-expand.grid(A,B,C)
cont
nA<-c(.125,.375,.625,.875)
nA<-1*((nA-.5)/.5)
nA<-c(.125,.375,.625,.875)
nA<-1*((nA-.5)/.5)
nB<-c(.125,.375,.625,.875)
nB<-.667*((nB-.5)/.5)
nC<-c(.125,.375,.625,.875)
nC<-.333*((nC-.5)/.5)
noise<-expand.grid(nA,nB,nC)
noise
nA<-c(.1667,.5,.8333)
nA<-nA-.5
nA
nA<-c(.1667,.5,.8333)
nA<-(nA-.5)/.5
nA
# create noise array
nA<-c(.1667,.5,.8333)
nA<-1*(nA-.5)/.5
nB<-c(.1667,.5,.8333)
nB<-.667*((nB-.5)/.5)
nC<-c(.1667,.5,.8333)
nC<-.333*((nC-.5)/.5)
noise<-expand.grid(nA,nB,nC)
noise
A<-c(20,30)
B<-c(12.5,17.5)
C<-c(4,6)
cont<-expand.grid(A,B,C)
run<-1:8
cont<-cbind(run,cont)
cont
run<-rep(1,27)
run
run<-rep(1,27)
noise1<-cbind(run,noise)
noise1
run<-rep(2,27)
noise2<-cbind(run,noise)
noise2
#create control factor array
A<-c(20,30)
B<-c(12.5,17.5)
C<-c(4,6)
cont<-expand.grid(A,B,C)
run<-1:8
cont<-cbind(run,cont)
# create noise array
nA<-c(.1667,.5,.8333)
nA<-1*(nA-.5)/.5
nB<-c(.1667,.5,.8333)
nB<-.667*((nB-.5)/.5)
nC<-c(.1667,.5,.8333)
nC<-.333*((nC-.5)/.5)
noise<-expand.grid(nA,nB,nC)
#create noise array for each level of the control array
run<-rep(1,27)
noise1<-cbind(run,noise)
run<-rep(2,27)
noise2<-cbind(run,noise)
run<-rep(3,27)
noise3<-cbind(run,noise)
run<-rep(4,27)
noise4<-cbind(run,noise)
run<-rep(5,27)
noise5<-cbind(run,noise)
run<-rep(6,27)
noise6<-cbind(run,noise)
run<-rep(7,27)
noise7<-cbind(run,noise)
run<-rep(8,27)
noise8<-cbind(run,noise)
cnoise<-rbind(noise1,noise2,noise3,noise4,noise5,noise6,noise7,noise8)
comb<-merge(cont,cnoise)
comb
cnoise
cont
cnoise
merge(cont,cnoise)
authors <- data.frame(
surname = c("Tukey", "Venables", "Tierney", "Ripley", "McNeil"),
nationality = c("US", "Australia", "US", "UK", "Australia"),
retired = c("yes", rep("no", 4)))
authors
books <- data.frame(
name = c("Tukey", "Venables", "Tierney", "Ripley", "Ripley", "McNeil"),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis"),
other.author = c(NA, "Ripley", NA, NA, NA, NA))
books
merge(authors, books, by.x="surname", by.y="name")
cont
A<-c(20,30)
B<-c(12.5,17.5)
C<-c(4,6)
cont<-expand.grid(A,B,C)
colnames(cont)<-c("A","B","C")
run<-1:8
cont<-cbind(run,cont)
cont
# create noise array
nA<-c(.1667,.5,.8333)
nA<-1*(nA-.5)/.5
nB<-c(.1667,.5,.8333)
nB<-.667*((nB-.5)/.5)
nC<-c(.1667,.5,.8333)
nC<-.333*((nC-.5)/.5)
noise<-expand.grid(nA,nB,nC)
colnames(noise)<-c("nA","nB","nC")
noise
run<-rep(1,27)
noise1<-cbind(run,noise)
merge(cont,noise1)
#create control factor array
A<-c(20,30)
B<-c(12.5,17.5)
C<-c(4,6)
cont<-expand.grid(A,B,C)
colnames(cont)<-c("A","B","C")
run<-1:8
cont<-cbind(run,cont)
# create noise array
nA<-c(.1667,.5,.8333)
nA<-1*(nA-.5)/.5
nB<-c(.1667,.5,.8333)
nB<-.667*((nB-.5)/.5)
nC<-c(.1667,.5,.8333)
nC<-.333*((nC-.5)/.5)
noise<-expand.grid(nA,nB,nC)
colnames(noise)<-c("nA","nB","nC")
run<-rep(1,27)
noise1<-cbind(run,noise)
run<-rep(2,27)
noise2<-cbind(run,noise)
run<-rep(3,27)
noise3<-cbind(run,noise)
run<-rep(4,27)
noise4<-cbind(run,noise)
run<-rep(5,27)
noise5<-cbind(run,noise)
run<-rep(6,27)
noise6<-cbind(run,noise)
run<-rep(7,27)
noise7<-cbind(run,noise)
run<-rep(8,27)
noise8<-cbind(run,noise)
cnoise<-rbind(noise1,noise2,noise3,noise4,noise5,noise6,noise7,noise8)
comb<-merge(cont,cnoise)
comb
comb$Z <-(87.0 / sqrt (3.1+1.41) )* log ((5.98 *(comb$A+comb$nA)/(.8*(comb$B+comb$nB)+comb$C+comb$nC)))
comb
tapply(comb$Z,comb$run,mean)
tapply(comb$Z,comb$run,var)
lnvarZ<-log(tapply(comb$Z,comb$run,var))
lnvarZ
cont<-cbind(cont,meanZ,lnvarZ)
meanZ<-tapply(comb$Z,comb$run,mean)
lnvarZ<-log(tapply(comb$Z,comb$run,var))
#attach meanZ and lnvarZ to control array
cont<-cbind(cont,meanZ,lnvarZ)
cont
modl<-lm(meanZ~(.)^3,data=cont)
summary(modl)
modl<-lm(meanZ~^A + B + C + A:B + A:C + B:C + A:B:C,data=cont)
modl<-lm(meanZ~A + B + C + A:B + A:C + B:C + A:B:C,data=cont)
summary(modl)
modd<-lm(lnvarZ~A + B + C + A:B + A:C + B:C + A:B:C,data=cont)
summary(modd)
modl<-lm(meanZ~A + B + C,data=cont)
summary(modl)
modd<-lm(lnvarZ~A + B + C,data=cont)
summary(modd)
Z<-function(A,B,C) {
Z<-(87.0/sqrt(3.1+1.41))*log((5.98*A)/(.8*B+C))
}
Z(26.6334,17.5,6)
Z<-function(A,B,C) {
Z<-(87.0/sqrt(3.1+1.41))*log((5.98*A)/(.8*B+C))
}
test<- Z(26.6334,17.5,6)
test
sigma2Z<-function(A,B,C) {
1.8647/A^2+73.76/(.8*B+C)^2
}
test<- sigma2Z(26.6334,17.5,6)
test
sigma2Z<-function(A,B,C) {
1.8647/(A^2) + 73.76/(.8*B+C)^2
}
test<- sigma2Z(26.6334,17.5,6)
test
sigma2Z<-function(A,B,C) {
186.47/(A^2) + 73.76/(.8*B+C)^2
}
test<- sigma2Z(26.6334,17.5,6)
test
ui<-matrix(c(1,-1,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,1,-1),6,3)
ui
# constrained optimization
Z<-function(A,B,C) {
Z<-(87.0/sqrt(3.1+1.41))*log((5.98*A)/(.8*B+C))
}
sigma2Z<-function(A,B,C) {
186.47/(A^2) + 73.76/(.8*B+C)^2
}
start<-c(25,15,5)
Imped<-function(x) {
A<-x[1]
B<-x[2]
C<-x[3]
Imped<- (sigma2Z(A,B,C)+10*abs(Z(A,B,C)))
}
ui<-matrix(c(1,-1,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,1,-1),6,3)
ci<-c(20,-30,12.5,-17.5,4,-6)
constrOptim(start, Imped, NULL, ui, ci)
Imped<-function(x) {
A<-x[1]
B<-x[2]
C<-x[3]
Imped<- (sigma2Z(A,B,C)+10*abs(Z(A,B,C)-85))
}
constrOptim(start, Imped, NULL, ui, ci)
# calculate location dispersion effects
modl<-lm(meanZ~A + B + C + A:B + A:C + B:C + A:B:C,data=cont
summary(modl)
cont
#create control factor array
A<-c(20,30)
B<-c(12.5,17.5)
C<-c(4,6)
cont<-expand.grid(A,B,C)
colnames(cont)<-c("A","B","C")
run<-1:8
cont<-cbind(run,cont)
# create noise array
nA<-c(.1667,.5,.8333)
dA<-1*(nA-.5)/.5
nB<-c(.1667,.5,.8333)
dB<-.667*((nB-.5)/.5)
nC<-c(.1667,.5,.8333)
dC<-.333*((nC-.5)/.5)
noise<-expand.grid(dA,dB,dC)
colnames(noise)<-c("dA","dB","dC")
#create noise array for each level of the control array
run<-rep(1,27)
noise1<-cbind(run,noise)
run<-rep(2,27)
noise2<-cbind(run,noise)
run<-rep(3,27)
noise3<-cbind(run,noise)
run<-rep(4,27)
noise4<-cbind(run,noise)
run<-rep(5,27)
noise5<-cbind(run,noise)
run<-rep(6,27)
noise6<-cbind(run,noise)
run<-rep(7,27)
noise7<-cbind(run,noise)
run<-rep(8,27)
noise8<-cbind(run,noise)
cnoise<-rbind(noise1,noise2,noise3,noise4,noise5,noise6,noise7,noise8)
# create combined array
comb<-merge(cont,cnoise)
comb$Z <-(87.0 / sqrt (3.1+1.41) )* log ((5.98 *(comb$A+comb$dA)/(.8*(comb$B+comb$dB)+comb$C+comb$dC)))
meanZ<-tapply(comb$Z,comb$run,mean)
lnvarZ<-log(tapply(comb$Z,comb$run,var))
cont<-cbind(cont,meanZ,lnvarZ)
modl<-lm(meanZ ~ A + B + C + A:B + A:C + B:C + A:B:C,data=cont)
summary(modl)
fullnormal(modl$coefficients[2:8],names(modl$coefficients[2:8]),alpha=.10,refline=FALSE)
library(daewr)
fullnormal(modl$coefficients[2:8],names(modl$coefficients[2:8]),alpha=.10,refline=FALSE)
fullnormal(modl$coefficients[2:8],names(modl$coefficients[2:8]),alpha=.05,refline=FALSE)
fullnormal(modl$coefficients[2:8],names(modl$coefficients[2:8]),alpha=.05,refline=FALSE)
fullnormal(modl$coefficients[2:8],names(modl$coefficients[2:8]),alpha=.04,refline=FALSE)
fullnormal(modl$coefficients[2:8],names(modl$coefficients[2:8]),alpha=.025,refline=FALSE)
halfnormal(modl$coefficients[2:8],names(modl$coefficients[2:8]),alpha=.025,refline=FALSE)
halfnorm(modl$coefficients[2:8],names(modl$coefficients[2:8]),alpha=.025,refline=FALSE)
fullnormal(modl$coefficients[2:8],names(modl$coefficients[2:8]),alpha=.02,refline=FALSE)
fullnormal(modl$coefficients[2:8],names(modl$coefficients[2:8]),alpha=.01,refline=FALSE)
fullnormal(modl$coefficients[2:8],names(modl$coefficients[2:8]),alpha=.01,refline=FALSE)
modd<-lm(lnvarZ~A + B + C + A:B + A:C + B:C + A:B:C,data=cont)
summary(modd)
fullnormal(modd$coefficients[2:8],names(modd$coefficients[2:8]),alpha=.05,refline=FALSE)
bdes<-FrF2(16,4)
fdes<-data.frame(D=(as.numeric(bdes$A)-1.5)/.5,H=(as.numeric(bdes$B)-1.5)/.5,G=(as.numeric(bdes$C)-1.5)/.5,
A=(as.numeric(bdes$D)-1.5)/.5)
fdes<-fdes[order(fdes[,4],fdes[,3],fdes[,2],fdes[,1]),]
fdes$F<- -fdes$D*fdes$G
fdes$GH<-fdes$G*fdes$H
fdes$C<- fdes$D*fdes$H*fdes$G*fdes$A
fdes$B<-fdes$H*fdes$G*fdes$A
fdes$J<- fdes$D*fdes$G*fdes$A
fdes$E<- -fdes$D*fdes$A
fdes$AC<- -fdes$D*fdes$H*fdes$G
fdes$AH<- fdes$H*fdes$A
fdes$AG<- fdes$A*fdes$G
fdes$e1<-fdes$D*fdes$H
fdes$e2<-fdes$D*fdes$H*fdes$A
fdes$y<-c(43.7,40.2,42.4,44.7,42.4,45.9,42.2,40.6,42.4,45.5,43.6,40.6,44.0,40.2,42.5,49.5)
library(FrF2)
bdes<-FrF2(16,4)
fdes<-data.frame(D=(as.numeric(bdes$A)-1.5)/.5,H=(as.numeric(bdes$B)-1.5)/.5,G=(as.numeric(bdes$C)-1.5)/.5,
A=(as.numeric(bdes$D)-1.5)/.5)
fdes<-fdes[order(fdes[,4],fdes[,3],fdes[,2],fdes[,1]),]
fdes$F<- -fdes$D*fdes$G
fdes$GH<-fdes$G*fdes$H
fdes$C<- fdes$D*fdes$H*fdes$G*fdes$A
fdes$B<-fdes$H*fdes$G*fdes$A
fdes$J<- fdes$D*fdes$G*fdes$A
fdes$E<- -fdes$D*fdes$A
fdes$AC<- -fdes$D*fdes$H*fdes$G
fdes$AH<- fdes$H*fdes$A
fdes$AG<- fdes$A*fdes$G
fdes$e1<-fdes$D*fdes$H
fdes$e2<-fdes$D*fdes$H*fdes$A
fdes$y<-c(43.7,40.2,42.4,44.7,42.4,45.9,42.2,40.6,42.4,45.5,43.6,40.6,44.0,40.2,42.5,49.5)
fdes
setwd("C:/My_R_Projects/pkg/daewr/data")
save(fdes,file="WeldS.rda")
class(fdes$D)
load("C:/My_R_Projects/pkg/daewr/data/connector.rda")
