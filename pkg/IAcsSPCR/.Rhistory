X = list(X1 = X1, X2 = X2) # a list of matrices, one for each variable
q = mqcc(X, type = "T2",add.stats=TRUE,title="T2 chart for Data in Ryan's Table 9.2")
summary(q)
library(qcc)
q = mqcc(X, type = "T2",add.stats=TRUE,title="T2 chart for Data in Ryan's Table 9.2")
summary(q)
data(RyanMultivar)
RyanMultivar
RyanMultivar
require(MASS)
# generate new "in control" data
Xnew <- list(X1 = matrix(NA, 10, 4), X2 =  matrix(NA, 10, 4))
for(i in 1:4)
{ x <- mvrnorm(10, mu = q$center, Sigma = q$cov)
Xnew$X1[,i] <- x[,1]
Xnew$X2[,i] <- x[,2]
}
Xnew
Xnew
X
qq <- mqcc(X, type = "T2", newdata = Xnew, pred.limits = TRUE)
# generate new "out of control" data
Xnew <- list(X1 = matrix(NA, 10, 4), X2 =  matrix(NA, 10, 4))
for(i in 1:4)
{ x <- mvrnorm(10, mu = 1.2*q$center, Sigma = q$cov)
Xnew$X1[,i] <- x[,1]
Xnew$X2[,i] <- x[,2]
}
qq <- mqcc(X, type = "T2", newdata = Xnew, pred.limits = TRUE)
summary(qq)
summary(qq)
nms<-colnames(Ryan92)
nms
Ryan92$nms[2]
nms[2]
nr<-nrows(Ryan92)
nr<-nrow(Ryan92)
as.numeric(Ryan92[1:nr,2])
Letters[1:5]
LETTERS
LETTERS[1]
Ryan92[,nms[2]]
nms[2]
nms[2]<-Ryan92[,nms[2]]
Ryan92[2]
for (i in 2:3) {}
for (i in 2:3) {Ryan92[i]}
for (i in 2:3) {Ryan92[i]}
x1
nms
nms<-colnames(Ryan92)
for (i in 2:3) {nms[i]<-Ryan92[i]}
nms[2]
x<-rep(NULL,3)
x<-rep(NULL,3)
for (i in 1:3)
{x[i]<-c("X",as.character(i))}
mqccRefm<-function(dataframe,p,m,n)
{nms<-colnames(dataframe)
for (i in 2:ncol(dataframe))
{nms[i]<-dataframe[i]
nms[i]<-matrix(nms[i],nrow=m,byrow=TRUE)}
return(nms[1])
}
p<-mqccRefm(Ryan92,2,20,4)
install.packages("C:/My_R_Projects/pkg/IAcsSPCR_0.1.0.zip", repos = NULL, type = "win.binary")
Ryan92
library(IAcsSPCR)
data(Ryan92)
Ryan92
data(Xnew)
Xnew
detach("package:IAcsSPCR", unload = TRUE)
# MEWMA example
x1<-c(-1.19,0.12,-1.69,0.3,0.89,0.82,-0.3,0.63,1.56,1.46)
x2<-c(0.59,0.9,0.4,0.46,-0.75,0.98,2.28,1.75,1.58,3.05)
Lowry<-data.frame(x1,x2) #data from Lowry, Woodall, Champ and Rigdon
save(Lowry, file='Lowry.rda')
Lowry
save(Lowry, file='Lowry.rda')
setwd("C:/Users/lawso/Box/IntroAccSampSPC")
save(Lowry, file='Lowry.rda')
install.packages("C:/My_R_Projects/pkg/IAcsSPCR_0.1.0.zip", repos = NULL, type = "win.binary")
install.packages("stats")
RShowDoc("KEYWORDS")
install.packages("C:/My_R_Projects/pkg/IAcsSPCR_0.1.3.zip", repos = NULL, type = "win.binary")
library(IAcsSPCR)
data(Lowry)
Sigma<-matrix(c(1, .5, .5, 1), nrow=2, ncol=2)
mu<-c(0,0)
MEWMA(Lowry,Sigma,mu,Sigma.known=TRUE)
MEWMA(Lowry,Sigma.known=FALSE)
mu5<-c(-.314,.32)
Sig5<-matrix(c(1.16893, -.3243, -.3243, 1.16893), nrow=2, ncol=2)
MEWMA(Lowry,Sig5,mu5,Sigma.known=TRUE)
set.seed(959)#<-store this one
Samp1<-round(mvrnorm(50,mu=c(11,18,9),Sigma=Sig1),digits=2)
Samp2<-round(mvrnorm(40,mu=c(10,17,9),Sigma=Sig1),digits=2)
Samp3<-round(mvrnorm(10,mu=c(10,17,9),Sigma=Sig3),digits=2)
subgroup<-rep(1:10,each=10)
Frame<-data.frame(cbind(subgroup,rbind(Samp1,Samp2,Samp3)))
Sig1<-matrix(c(3,2,1,2,4,1,1,1,2),nrow=3,ncol=3)
det(Sig1)
ev1<-eigen(Sig1)
ev1$values
Sig2<-matrix(c(4,2,0,2,4,2,0,2,4),nrow=3,ncol=3)
det(Sig2)
ev2<-eigen(Sig2)
ev2$values
Sig3<-matrix(c(6,2,0,2,7,2,0,2,5),nrow=3,ncol=3)
det(Sig3)
ev3<-eigen(Sig3)
ev3$values
library(MASS)
set.seed(959)#<-store this one
Samp1<-round(mvrnorm(50,mu=c(11,18,9),Sigma=Sig1),digits=2)
Samp2<-round(mvrnorm(40,mu=c(10,17,9),Sigma=Sig1),digits=2)
Samp3<-round(mvrnorm(10,mu=c(10,17,9),Sigma=Sig3),digits=2)
subgroup<-rep(1:10,each=10)
Frame<-data.frame(cbind(subgroup,rbind(Samp1,Samp2,Samp3)))
Frame
install.packages("C:/My_R_Projects/pkg/IAcsSPCR_0.1.3.zip", repos = NULL, type = "win.binary")
GVcontrol<-function(DF,m,n,p)
{
requireNamespace('abind')
# function for creating control charts of the generalized variance
names<-colnames(DF)
if(names[1]!='subgroup'){
stop("The first column number in the data frame must be called subgroup")
}
if(n<=p){
stop("m must be greater than p")
}
nrd<-nrow(DF)
if(nrd!=n*m){
stop("The number of rows in the data frame must equal n*m")
}
ncd<-ncol(DF)
if(ncd!=p+1){
stop("The number of columns in the dataframe must be equal to p+1")
}
df<-subset(DF,DF$subgroup==1)
nrdf<-nrow(df)
if(nrdf!=n){
stop("The number of samples in each subgroup must be equal to n")
}
# make dataframe into an array of matricies for one for each subgroup
X<-data.matrix(df[-1])
# get subgroup mean vectors and covariance matricies
S<-cov(X)
GV<-det(S)
mu<-apply(X,2,mean)
gr<-2
while (gr<=m)
{
df<-subset(DF,DF$subgroup==gr)
nrdf<-nrow(df)
if(nrdf==0){
stop("The subgroup numbers must be in sequential order from 1 to m")
}
if(nrdf!=n){
stop("The number of samples in each subgroup must be equal to n")
}
Y<-data.matrix(df[-1])
S2<-cov(Y)
GV2<-det(S2)
#cat("gr=",gr," GV2=",GV2,"S2=",S2,"\n")
mu2<-apply(Y,2,mean)
X<-abind(X,Y,along=3)
# subgroup mean vectors in rows of mu
mu<-rbind(mu,mu2)
S<-abind(S,S2,along=3)
GV<-c(GV,GV2)
gr<-gr+1
}
rownames(mu)<-c(1:m)
# get grand mean vector and covariance matrix
Mu<-apply(mu,2,mean)
Cov<-apply(S,1:2,mean)
GVM<-det(Cov)
# calculate b1
prod<-n-1
for (i in 2:p) {
prod<-prod*(n-i)
}
b1<-prod/((n-1)^p)
# calculate b2
prod2<-n-1+2
for (j in 2:p){
prod2<-prod2*(n-j+2)
}
b2<-(prod*(prod2-prod))/((n-1)^(2*p))
# calculate centerline and control limits
CL<-det(Cov)
UCL<-(det(Cov)/b1)*(b1+3*b2^.5)
LCL<-max(0,(det(Cov)/b1)*(b1-3*b2^.5))
# plot control chart
yl<-1.10*max(UCL,max(GV))
plot(c(1:m),GV,type='b',ylim=c(0,yl),xlab='Subgroup Number',ylab='|S|',main="Control Chart for sample generalized variance")
abline(h=CL,lty=1,col='black')
abline(h=UCL,lty=3,col='red')
text(1,1.05*UCL,"UCL")
# return result
result1<-list(name="UCL=",value=UCL)
result2<-list(name="Covariance matrix=",value=Cov)
result3<-list(name="Generalized Variance |S|",value=GVM)
result4<-list(name="mean vector=",value=Mu)
result5<-list(name="Subgroup Generalized Variances=",value=GV)
result<-c(result1,result2,result3,result4,result5)
return(result)
}
library(IAcsSPCR)
data(Ryan92)
GVcontrol(Ryan92,20,4,2)
library(abind)
GVcontrol<-function(DF,m,n,p)
{
# function for creating control charts of the generalized variance
names<-colnames(DF)
if(names[1]!='subgroup'){
stop("The first column number in the data frame must be called subgroup")
}
if(n<=p){
stop("m must be greater than p")
}
nrd<-nrow(DF)
if(nrd!=n*m){
stop("The number of rows in the data frame must equal n*m")
}
ncd<-ncol(DF)
if(ncd!=p+1){
stop("The number of columns in the dataframe must be equal to p+1")
}
df<-subset(DF,DF$subgroup==1)
nrdf<-nrow(df)
if(nrdf!=n){
stop("The number of samples in each subgroup must be equal to n")
}
# make dataframe into an array of matricies for one for each subgroup
X<-data.matrix(df[-1])
# get subgroup mean vectors and covariance matricies
S<-cov(X)
GV<-det(S)
mu<-apply(X,2,mean)
gr<-2
while (gr<=m)
{
df<-subset(DF,DF$subgroup==gr)
nrdf<-nrow(df)
if(nrdf==0){
stop("The subgroup numbers must be in sequential order from 1 to m")
}
if(nrdf!=n){
stop("The number of samples in each subgroup must be equal to n")
}
Y<-data.matrix(df[-1])
S2<-cov(Y)
GV2<-det(S2)
#cat("gr=",gr," GV2=",GV2,"S2=",S2,"\n")
mu2<-apply(Y,2,mean)
X<-abind(X,Y,along=3)
# subgroup mean vectors in rows of mu
mu<-rbind(mu,mu2)
S<-abind(S,S2,along=3)
GV<-c(GV,GV2)
gr<-gr+1
}
rownames(mu)<-c(1:m)
# get grand mean vector and covariance matrix
Mu<-apply(mu,2,mean)
Cov<-apply(S,1:2,mean)
GVM<-det(Cov)
# calculate b1
prod<-n-1
for (i in 2:p) {
prod<-prod*(n-i)
}
b1<-prod/((n-1)^p)
# calculate b2
prod2<-n-1+2
for (j in 2:p){
prod2<-prod2*(n-j+2)
}
b2<-(prod*(prod2-prod))/((n-1)^(2*p))
# calculate centerline and control limits
CL<-det(Cov)
UCL<-(det(Cov)/b1)*(b1+3*b2^.5)
LCL<-max(0,(det(Cov)/b1)*(b1-3*b2^.5))
# plot control chart
yl<-1.10*max(UCL,max(GV))
plot(c(1:m),GV,type='b',ylim=c(0,yl),xlab='Subgroup Number',ylab='|S|',main="Control Chart for sample generalized variance")
abline(h=CL,lty=1,col='black')
abline(h=UCL,lty=3,col='red')
text(1,1.05*UCL,"UCL")
# return result
result1<-list(name="UCL=",value=UCL)
result2<-list(name="Covariance matrix=",value=Cov)
result3<-list(name="Generalized Variance |S|",value=GVM)
result4<-list(name="mean vector=",value=Mu)
result5<-list(name="Subgroup Generalized Variances=",value=GV)
result<-c(result1,result2,result3,result4,result5)
return(result)
}
library(IAcsSPCR)
data(Ryan92)
GVcontrol(Ryan92,20,4,2)
install.packages("C:/My_R_Projects/pkg/IAcsSPCR_0.1.3.zip", repos = NULL, type = "win.binary")
detach("package:IAcsSPCR", unload = TRUE)
install.packages("C:/My_R_Projects/pkg/IAcsSPCR_0.1.3.zip", repos = NULL, type = "win.binary")
library(IAcsSPCR)
data(Ryan92)
GVcontrol(Ryan92,20,4,2)
install.packages("C:/My_R_Projects/pkg/IAcsSPCR_0.1.3.zip", repos = NULL, type = "win.binary")
library(IacsSPCR)
library(IAcsSPCR)
data(x1)
x1
data(x2)
x2
data(Sample)
Sample
install.packages("IAcsSPCR", repos="http://R-Forge.R-project.org")
library(IAcsSPCR)
arl(h=6,k=2,lambda=1.88,shift=0)
arl(h=6,k=2,lambda=1.88,shift=.9627)
library("quantmod")
tickers <- c("GE","IBM","JPM","MSFT","WMT")
getSymbols(tickers,from = "2000-12-01",to = "2010-12-31")
for(ticker in tickers) {
tmp <- Cl(to.monthly(eval(parse(text = ticker))))
P <- cbind(P, tmp)
}
P <- NULL
for(ticker in tickers) {
tmp <- Cl(to.monthly(eval(parse(text = ticker))))
P <- cbind(P, tmp)
}
colnames(P) <- tickers
P
R <- diff(log(P))
R <- R[-1,]
mu <- colMeans(R)
sigma <- cov(R)
mu
sigma
library("PerformanceAnalytics")
pContribCVaR <- ES(weights = rep(0.2, 5),method = "gaussian",portfolio_method = "component",
mu = mu,sigma = sigma)$pct_contrib_ES
rbind(tickers, round(100 * pContribCVaR, 2))
tickers "GE" "IBM" "JPM" "MSFT" "WMT"
round(100*mu,2)
round(100 * diag(sigma)^(1/2), 2)
obj <- function(w) {
if (sum(w) == 0) { w <- w + 1e-2 }
w <- w / sum(w)
CVaR <- ES(weights = w,method = "gaussian",portfolio_method = "component",mu = mu,sigma = sigma)
tmp1 <- CVaR$ES
tmp2 <- max(CVaR$pct_contrib_ES - 0.225, 0)
out <- tmp1 + 1e3 * tmp2
}
set.seed(1234)
out <- DEoptim(fn = obj,lower = rep(0, 5),upper = rep(1, 5))
out$optim$bestval
library("PerformanceAnalytics")
pContribCVaR <- ES(weights = rep(0.2, 5),method = "gaussian",portfolio_method = "component",
mu = mu,sigma = sigma)$pct_contrib_ES
rbind(tickers, round(100 * pContribCVaR, 2))
round(100*mu,2)
round(100 * diag(sigma)^(1/2), 2)
obj <- function(w) {
if (sum(w) == 0) { w <- w + 1e-2 }
w <- w / sum(w)
CVaR <- ES(weights = w,method = "gaussian",portfolio_method = "component",mu = mu,sigma = sigma)
tmp1 <- CVaR$ES
tmp2 <- max(CVaR$pct_contrib_ES - 0.225, 0)
out <- tmp1 + 1e3 * tmp2
}
set.seed(1234)
out <- DEoptim(fn = obj,lower = rep(0, 5),upper = rep(1, 5))
install.packages("DEoptim")
library(DEoptim)
set.seed(1234)
out <- DEoptim(fn = obj,lower = rep(0, 5),upper = rep(1, 5))
out$optim$bestval
wstar <- out$optim$bestmem
wstar <- wstar / sum(wstar)
rbind(tickers, round(100 * wstar, 2))
100 * (sum(wstar * mu) - mean(mu))
A<-3.865
myPath <- "C:/Users/lawso/Box/coronavirus"
#myFile <- "CSOnsetData.csv"
myFile <- "CsTestData (5).csv"
myData <- read.csv(paste(myPath, myFile, sep="/"))
# column names
# 2= Date 3=Cases 4=Hosp 10=Bear.River.cases 11=Central.Utah.cases 12=Davis.County.cases 13=Salt.Lake.cases 16=Southwest.Utah.cases
# 17=Summit.County.cases 20=Utah.County.cases ??? 21 on 10/26
# 23=Bear.River.hospitalized 25=Central.Utah.hospitalized 26=Davis.County.hospitalized 27=Salt.Lake.County.hospitalized
# 30=Southwest.Utah.hospitalized 31=Summit.County.hospitalized 33=Utah.County.hospitalized
#rows<-c(57:293)
rows<-c(118:293) # CEN
#rows<-c(103:293) # BR and SW
subdata<-myData[rows, ]
ncases<-subdata[ ,11]
n<-length(ncases)
mu0<-mean(ncases[1:25])
cases<-rep(0,(n))
cases[1]<-ncases[1]
for (i in 2:n) {
cases[i]<-ncases[i]+cases[i-1]
}
#day1<-as.Date("2020-03-15")
#day1<-as.Date("2020-04-30")# BW & SW
day1<-as.Date("2020-05-15") # CEN
day<-c(rep(1:(n)))
dayd<-day+day1
rdata<-data.frame(dayd,ncases,cases)
names(rdata)<-c("Date","New Cases","Cumlative Cases")
cat("       Raw Data Used for Modeling","\n")
rdata
A<-3.865
myPath <- "C:/Users/lawso/Box/coronavirus"
#myFile <- "CSOnsetData.csv"
myFile <- "CsTestData (5).csv"
myData <- read.csv(paste(myPath, myFile, sep="/"))
# column names
# 2= Date 3=Cases 4=Hosp 10=Bear.River.cases 11=Central.Utah.cases 12=Davis.County.cases 13=Salt.Lake.cases 16=Southwest.Utah.cases
# 17=Summit.County.cases 20=Utah.County.cases ??? 21 on 10/26
# 23=Bear.River.hospitalized 25=Central.Utah.hospitalized 26=Davis.County.hospitalized 27=Salt.Lake.County.hospitalized
# 30=Southwest.Utah.hospitalized 31=Summit.County.hospitalized 33=Utah.County.hospitalized
#rows<-c(57:293)
rows<-c(118:292) # CEN
#rows<-c(103:293) # BR and SW
subdata<-myData[rows, ]
ncases<-subdata[ ,11]
n<-length(ncases)
mu0<-mean(ncases[1:25])
cases<-rep(0,(n))
cases[1]<-ncases[1]
for (i in 2:n) {
cases[i]<-ncases[i]+cases[i-1]
}
#day1<-as.Date("2020-03-15")
#day1<-as.Date("2020-04-30")# BW & SW
day1<-as.Date("2020-05-15") # CEN
day<-c(rep(1:(n)))
dayd<-day+day1
rdata<-data.frame(dayd,ncases,cases)
names(rdata)<-c("Date","New Cases","Cumlative Cases")
cat("       Raw Data Used for Modeling","\n")
rdata
A<-3.865
myPath <- "C:/Users/lawso/Box/coronavirus"
#myFile <- "CSOnsetData.csv"
myFile <- "CsTestData (5).csv"
myData <- read.csv(paste(myPath, myFile, sep="/"))
# column names
# 2= Date 3=Cases 4=Hosp 10=Bear.River.cases 11=Central.Utah.cases 12=Davis.County.cases 13=Salt.Lake.cases 16=Southwest.Utah.cases
# 17=Summit.County.cases 20=Utah.County.cases ??? 21 on 10/26
# 23=Bear.River.hospitalized 25=Central.Utah.hospitalized 26=Davis.County.hospitalized 27=Salt.Lake.County.hospitalized
# 30=Southwest.Utah.hospitalized 31=Summit.County.hospitalized 33=Utah.County.hospitalized
#rows<-c(57:293)
rows<-c(118:293) # CEN
#rows<-c(103:293) # BR and SW
subdata<-myData[rows, ]
ncases<-subdata[ ,3]
n<-length(ncases)
mu0<-mean(ncases[1:25])
cases<-rep(0,(n))
cases[1]<-ncases[1]
for (i in 2:n) {
cases[i]<-ncases[i]+cases[i-1]
}
#day1<-as.Date("2020-03-15")
#day1<-as.Date("2020-04-30")# BW & SW
day1<-as.Date("2020-05-15") # CEN
day<-c(rep(1:(n)))
dayd<-day+day1
rdata<-data.frame(dayd,ncases,cases)
names(rdata)<-c("Date","New Cases","Cumlative Cases")
cat("       Raw Data Used for Modeling","\n")
rdata
A<-3.865
myPath <- "C:/Users/lawso/Box/coronavirus"
#myFile <- "CSOnsetData.csv"
myFile <- "CsTestData (5).csv"
myData <- read.csv(paste(myPath, myFile, sep="/"))
# column names
# 2= Date 3=Cases 4=Hosp 10=Bear.River.cases 11=Central.Utah.cases 12=Davis.County.cases 13=Salt.Lake.cases 16=Southwest.Utah.cases
# 17=Summit.County.cases 20=Utah.County.cases ??? 21 on 10/26
# 23=Bear.River.hospitalized 25=Central.Utah.hospitalized 26=Davis.County.hospitalized 27=Salt.Lake.County.hospitalized
# 30=Southwest.Utah.hospitalized 31=Summit.County.hospitalized 33=Utah.County.hospitalized
#rows<-c(57:293)
rows<-c(118:292) # CEN
#rows<-c(103:293) # BR and SW
subdata<-myData[rows, ]
ncases<-subdata[ ,3]
n<-length(ncases)
mu0<-mean(ncases[1:25])
cases<-rep(0,(n))
cases[1]<-ncases[1]
for (i in 2:n) {
cases[i]<-ncases[i]+cases[i-1]
}
#day1<-as.Date("2020-03-15")
#day1<-as.Date("2020-04-30")# BW & SW
day1<-as.Date("2020-05-15") # CEN
day<-c(rep(1:(n)))
dayd<-day+day1
rdata<-data.frame(dayd,ncases,cases)
names(rdata)<-c("Date","New Cases","Cumlative Cases")
cat("       Raw Data Used for Modeling","\n")
rdata
